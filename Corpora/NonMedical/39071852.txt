In computer science, one approach to the dynamic optimality problem on online algorithms for binary search trees involves reformulating the problem geometrically, in terms of augmenting a set of points in the plane with as few additional points as possible in order to avoid rectangles with only two points on their boundary.


== Access sequences and competitive ratio ==
As typically formulated, the online binary search tree problem involves search trees defined over a fixed key set 
  
    
      
        {
        1
        ,
        2
        ,
        .
        .
        .
        ,
        n
        }
      
    
    {\displaystyle \{1,2,...,n\}}
  . An access sequence is a sequence 
  
    
      
        
          x
          
            1
          
        
        ,
        
          x
          
            2
          
        
        ,
      
    
    {\displaystyle x_{1},x_{2},}
   ... where each access 
  
    
      
        
          x
          
            i
          
        
      
    
    {\displaystyle x_{i}}
   belongs to the key set.
Any particular algorithm for maintaining binary search trees (such as the splay tree algorithm or Iacono's working set structure) has a cost for each access sequence that models the amount of time it would take to use the structure to search for each of the keys in the access sequence in turn. The cost of a search is modeled by assuming that the search tree algorithm has a single pointer into a binary search tree, which at the start of each search points to the root of the tree. The algorithm may then perform any sequence of the following operations:

Move the pointer to its left child.
Move the pointer to its right child.
Move the pointer to its parent.
Perform a single tree rotation on the pointer and its parent.The search is required, at some point within this sequence of operations to move the pointer to a node containing the key, and the cost of the search is the number of operations that are performed in the sequence. The total cost costA(X) for algorithm A on access sequence X is the sum of the costs of the searches for each successive key in the sequence.
As is standard in competitive analysis, the competitive ratio of an algorithm A is defined to be the maximum, over all access sequences, of the ratio of the cost for A to the best cost that any algorithm could achieve:

  
    
      
        
          ρ
          
            A
          
        
        =
        
          sup
          
            X
          
        
        
          
            
              
                
                  c
                  o
                  s
                  t
                
                
                  A
                
              
              (
              X
              )
            
            
              
                
                  c
                  o
                  s
                  t
                
                
                  
                    o
                    p
                    t
                  
                
              
              (
              X
              )
            
          
        
        .
      
    
    {\displaystyle \rho _{A}=\sup _{X}{\frac {\mathrm {cost} _{A}(X)}{\mathrm {cost} _{\mathrm {opt} }(X)}}.}
  The dynamic optimality conjecture states that splay trees have constant competitive ratio, but this remains unproven. The geometric view of binary search trees provides a different way of understanding the problem that has led to the development of alternative algorithms that could also (conjecturally) have a constant competitive ratio.


== Translation to a geometric point set ==
In the geometric view of the online binary search tree problem,
an access sequence 
  
    
      
        
          x
          
            1
          
        
        ,
        .
        .
        .
        ,
        
          x
          
            m
          
        
      
    
    {\displaystyle x_{1},...,x_{m}}
   (sequence of searches performed on a binary search tree (BST) with a key set 
  
    
      
        
          1
          ,
          2
          ,
          .
          .
          .
          ,
          n
        
      
    
    {\displaystyle {1,2,...,n}}
  ) is mapped to the set of points 
  
    
      
        
          (
          
            x
            
              i
            
          
          ,
          i
          )
        
      
    
    {\displaystyle {(x_{i},i)}}
  , where the X-axis represents the key space and the Y-axis represents time; to which a set of touched nodes is added.  By touched nodes we mean the following. Consider a BST access algorithm with a single pointer to a node in the tree. At the beginning of an access to a given key 
  
    
      
        
          x
          
            i
          
        
      
    
    {\displaystyle x_{i}}
  , this pointer is initialized to the root of the tree. Whenever the pointer moves to or is initialized to a node, we say that the node is touched.
We represent a BST algorithm for a given input sequence by drawing a point for each item that gets touched.
For example, assume the following BST on 4 nodes is given: 
The key set is {1, 2, 3, 4}.

Let 3, 1, 4, 2 be the access sequence. 

In the first access, only the node 3 is touched.
In the second access, the nodes 3 and 1 are touched.
In the third access - 3 and 4 are touched.
In the fourth access, touch 3, then 1, and after that 2.The touches are represented geometrically: If an item x is touched in the operations for the ith access, then a point (x,i) is plotted.


== Arborally satisfied point sets ==
A point set is said to be arborally satisfied if the following property holds: for any
pair of points that do not lie on the same horizontal or vertical line, there exists a third point
which lies in the rectangle spanned by the first two points (either inside or on the boundary).


=== Theorem ===
A point set containing the points 
  
    
      
        (
        
          x
          
            i
          
        
        ,
        i
        )
      
    
    {\displaystyle (x_{i},i)}
   is arborally satisfied if and only if it corresponds to a valid BST for the input sequence 
  
    
      
        
          x
          
            1
          
        
        ,
        
          x
          
            2
          
        
        ,
        .
        .
        .
        ,
        
          x
          
            m
          
        
      
    
    {\displaystyle x_{1},x_{2},...,x_{m}}
  .


==== Proof ====
First, prove that the point set for any valid BST algorithm is arborally satisfied.
Consider points 
  
    
      
        (
        x
        ,
        i
        )
      
    
    {\displaystyle (x,i)}
   and 
  
    
      
        (
        y
        ,
        j
        )
      
    
    {\displaystyle (y,j)}
  , where x is touched at time i and y is touched at time j. Assume by symmetry that 
  
    
      
        x
        <
        y
      
    
    {\displaystyle x<y}
   and 
  
    
      
        i
        <
        j
      
    
    {\displaystyle i<j}
  . It needs to be shown that there exists a third point in the rectangle
with corners as 
  
    
      
        (
        x
        ,
        i
        )
      
    
    {\displaystyle (x,i)}
   and 
  
    
      
        (
        y
        ,
        j
        )
      
    
    {\displaystyle (y,j)}
  . Also let 
  
    
      
        
          
            L
            C
            A
          
          
            t
          
        
        (
        a
        ,
        b
        )
      
    
    {\displaystyle \mathrm {LCA} _{t}(a,b)}
   denote the lowest common ancestor of nodes a
and b right before time t. There are a few cases:

If 
  
    
      
        
          
            L
            C
            A
          
          
            i
          
        
        (
        x
        ,
        y
        )
        ≠
        x
      
    
    {\displaystyle \mathrm {LCA} _{i}(x,y)\neq x}
  , then use the point 
  
    
      
        (
        
          
            L
            C
            A
          
          
            i
          
        
        (
        x
        ,
        y
        )
        ,
        i
        )
      
    
    {\displaystyle (\mathrm {LCA} _{i}(x,y),i)}
  , since 
  
    
      
        
          
            L
            C
            A
          
          
            i
          
        
        (
        x
        ,
        y
        )
      
    
    {\displaystyle \mathrm {LCA} _{i}(x,y)}
   must have been touched if x was.
If 
  
    
      
        
          
            L
            C
            A
          
          
            j
          
        
        (
        x
        ,
        y
        )
        ≠
        y
      
    
    {\displaystyle \mathrm {LCA} _{j}(x,y)\neq y}
  , then the point 
  
    
      
        (
        
          
            L
            C
            A
          
          
            j
          
        
        (
        x
        ,
        y
        )
        ,
        j
        )
      
    
    {\displaystyle (\mathrm {LCA} _{j}(x,y),j)}
   can be used.
If neither of the above two cases hold, then x must be an ancestor of y right before time i and y be an ancestor of x right before time j. Then at some time k 
  
    
      
        (
        i
        ≤
        k
        <
        j
        )
      
    
    {\displaystyle (i\leq k<j)}
  , y must have been rotated above x, so the point 
  
    
      
        (
        y
        ,
        k
        )
      
    
    {\displaystyle (y,k)}
   can be used.Next, show the other direction: given an arborally satisfied point set, a valid BST corresponding to that point set can be constructed. Organize our BST into a treap which is organized in heap-order by next-touch-time. Note that next-touch-time has ties and is thus not uniquely defined, but this isn’t a problem as long as there is a way to break ties. When time i reached, the nodes touched form a connected subtree at the top, by the heap ordering property. Now, assign new next-touch-times for this subtree, and rearrange it into a new local treap.
If a pair of nodes, x and y, straddle the boundary between the touched and untouched part
of the treap, then if y is to be touched sooner than x then 
  
    
      
        (
        x
        ,
        n
        o
        w
        )
        →
        (
        y
        ,
        n
        e
        x
        t
        −
        t
        o
        u
        c
        h
        (
        y
        )
        )
      
    
    {\displaystyle (x,now)\to (y,next-touch(y))}
   is an unsatisfied rectangle because the leftmost such point would be the right child of x, not y.


=== Corollary ===
Finding the best BST execution for the input sequence 
  
    
      
        
          x
          
            1
          
        
        ,
        
          x
          
            2
          
        
        ,
        .
        .
        .
        ,
        
          x
          
            m
          
        
      
    
    {\displaystyle x_{1},x_{2},...,x_{m}}
   is equivalent to finding the minimum cardinality superset of points (that contains the input in geometric representation) that is arborally satisfied. The more general problem of finding the minimum cardinality arborally satisfied superset of a general set of input points (not limited to one input point per y coordinate), is known to be NP-complete.


== Greedy algorithm ==
The following greedy algorithm constructs arborally satisfiable sets:

Sweep the point set with a horizontal line by increasing y coordinate.
At time i, place the minimal number of points at 
  
    
      
        y
        =
        i
      
    
    {\displaystyle y=i}
   to make the point set up to 
  
    
      
        y
        ≥
        i
      
    
    {\displaystyle y\geq i}
   arborally satisfied. This minimal set of points is uniquely defined: for any unsatisfied rectangle formed with 
  
    
      
        (
        
          x
          
            i
          
        
        ,
        i
        )
      
    
    {\displaystyle (x_{i},i)}
   in one corner, add the other corner at 
  
    
      
        y
        =
        i
      
    
    {\displaystyle y=i}
  .The algorithm has been conjectured to be optimal within an additive term.


== Other results ==
The geometry of binary search trees has been used to provide an algorithm which is dynamically optimal if any binary search tree algorithm is dynamically optimal.


== See also ==
Binary search algorithm
Tango trees
Splay trees
Self-balancing binary search tree
Optimal binary search tree
Interleave lower bound


== References ==